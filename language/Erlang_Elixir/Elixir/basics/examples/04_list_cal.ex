defmodule ListOperationsExample do
  @moduledoc """
  이 모듈은 Elixir의 리스트 연산을 상세하게 예시하는 예제입니다.
  초보자부터 실무자까지 모두가 리스트의 기본 개념과 다양한 연산 기법을 이해할 수 있도록,
  리스트 생성, 연결, 컴프리헨션, 매핑, 필터링, 접기(reduce) 등의 다양한 연산을 아주 자세한 주석과 함께 설명합니다.
  """

  @doc """
  `run/0` 함수는 여러 리스트 연산 예제를 실행하고, 각 단계의 결과를 콘솔에 출력합니다.

  다루는 항목:
  1. 리스트 생성 및 기본 연산
  2. 리스트 연결 (Concatenation)
  3. 리스트 컴프리헨션 (List Comprehension)
  4. Enum.map/2를 이용한 매핑 (Mapping)
  5. Enum.filter/2를 이용한 필터링 (Filtering)
  6. Enum.reduce/3를 이용한 접기 (Folding)

  각 예제는 IO.puts/1 및 IO.inspect/1 함수를 사용해 결과를 출력하며,
  최종적으로 각 단계의 결과들을 하나의 맵으로 반환합니다.
  """
  def run do
    IO.puts("=== Elixir 리스트 연산 예제 시작 ===")
    IO.puts("----------------------------------------------------")

    # -----------------------------------------------------------------
    # 1. 리스트 생성 및 기본 연산
    # -----------------------------------------------------------------
    # 리스트는 0개 이상의 요소를 포함하는 순서 있는 컬렉션입니다.
    # 대괄호([])를 사용하여 표현하며, 요소들은 서로 다른 타입을 포함할 수 있습니다.
    list1 = [1, 2, 3, 4, 5]
    list2 = [6, 7, 8, 9, 10]

    IO.puts("원본 리스트 list1:")
    IO.inspect(list1)
    IO.puts("원본 리스트 list2:")
    IO.inspect(list2)
    IO.puts("----------------------------------------------------")

    # -----------------------------------------------------------------
    # 2. 리스트 연결 (Concatenation)
    # -----------------------------------------------------------------
    # 두 개 이상의 리스트를 하나의 리스트로 결합할 때는 ++ 연산자를 사용합니다.
    # 아래 예제에서는 list1과 list2를 연결하여 하나의 긴 리스트를 생성합니다.
    concatenated = list1 ++ list2
    IO.puts("리스트 연결 결과 (list1 ++ list2):")
    IO.inspect(concatenated)
    IO.puts("----------------------------------------------------")

    # -----------------------------------------------------------------
    # 3. 리스트 컴프리헨션 (List Comprehension)
    # -----------------------------------------------------------------
    # 리스트 컴프리헨션은 리스트의 각 요소를 순회하며 특정 조건을 적용하고 변환하여,
    # 새로운 리스트를 생성할 때 사용됩니다.
    # 아래 예제는 연결된 리스트에서 짝수만 선택하고, 그 값을 제곱하여 새로운 리스트를 만듭니다.
    squared_evens = for x <- concatenated, rem(x, 2) == 0, do: x * x
    IO.puts("리스트 컴프리헨션 결과 (짝수 제곱):")
    IO.inspect(squared_evens)
    IO.puts("----------------------------------------------------")

    # -----------------------------------------------------------------
    # 4. Enum.map/2를 이용한 매핑 (Mapping)
    # -----------------------------------------------------------------
    # Enum.map/2 함수는 리스트의 각 요소에 대해 주어진 함수를 적용하여 새로운 리스트를 반환합니다.
    # 아래 예제에서는 list1의 각 요소를 2배로 만들어 새로운 리스트를 생성합니다.
    doubled = Enum.map(list1, fn x -> x * 2 end)
    IO.puts("Enum.map 결과 (list1의 각 요소 2배):")
    IO.inspect(doubled)
    IO.puts("----------------------------------------------------")

    # -----------------------------------------------------------------
    # 5. Enum.filter/2를 이용한 필터링 (Filtering)
    # -----------------------------------------------------------------
    # Enum.filter/2 함수는 리스트의 각 요소에 대해 주어진 조건을 평가하고,
    # 조건을 만족하는 요소들만 선택하여 새로운 리스트를 생성합니다.
    # 아래 예제는 연결된 리스트에서 값이 5보다 큰 요소들만 선택합니다.
    filtered = Enum.filter(concatenated, fn x -> x > 5 end)
    IO.puts("Enum.filter 결과 (값이 5보다 큰 요소들):")
    IO.inspect(filtered)
    IO.puts("----------------------------------------------------")

    # -----------------------------------------------------------------
    # 6. Enum.reduce/3를 이용한 접기 (Folding)
    # -----------------------------------------------------------------
    # Enum.reduce/3 함수는 리스트의 모든 요소를 누적하여 하나의 값으로 결합할 때 사용됩니다.
    # 초기 누적값을 0으로 설정하고, 각 요소를 누적 합계에 더하여 전체 합계를 구합니다.
    sum = Enum.reduce(concatenated, 0, fn x, acc -> x + acc end)
    IO.puts("Enum.reduce 결과 (리스트의 합):")
    IO.inspect(sum)
    IO.puts("----------------------------------------------------")

    IO.puts("=== 리스트 연산 예제 종료 ===")

    # 최종적으로 각 연산 결과들을 하나의 맵으로 반환합니다.
    %{
      list1: list1,
      list2: list2,
      concatenated: concatenated,
      squared_evens: squared_evens,
      doubled: doubled,
      filtered: filtered,
      sum: sum
    }
  end
end

# 모듈 실행: 이 파일을 실행하면 콘솔에 리스트 연산 예제 결과가 출력됩니다.
ListOperationsExample.run()
