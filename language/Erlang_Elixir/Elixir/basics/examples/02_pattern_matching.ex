defmodule PatternMatchingExample do
  @moduledoc """
  이 모듈은 Elixir의 패턴 매칭 기능을 상세하게 예시하는 예제입니다.
  초보자부터 실무자까지 모두가 패턴 매칭의 기본 개념과 다양한 활용법을 이해할 수 있도록,
  튜플, 리스트, 맵 등 여러 데이터 구조에서 패턴 매칭을 사용하는 예제를 아주 상세한 주석과 함께 제공합니다.
  """

  @doc """
  `run/0` 함수는 여러 패턴 매칭 예제를 실행하고, 그 결과를 콘솔에 출력합니다.

  예제 항목:
  1. **튜플 패턴 매칭**
     - 튜플의 구조에 따라 값을 추출하는 방법을 보여줍니다.
  2. **리스트 패턴 매칭**
     - `[head | tail]` 구문을 통해 리스트의 첫 요소와 나머지 요소들을 분리하는 예제입니다.
  3. **맵 패턴 매칭**
     - 맵의 특정 키를 기준으로 값을 추출하는 방법을 설명합니다.
  4. **가드(guard)를 사용한 패턴 매칭**
     - 패턴 매칭에 추가 조건을 부여하여, 보다 세밀한 조건 분기를 수행하는 예제입니다.
  """
  def run do
    IO.puts("패턴 매칭 예제 시작")
    IO.puts("----------------------------------------------------")

    # -----------------------------------------------------------------
    # 1. 튜플 패턴 매칭 예제
    # -----------------------------------------------------------------
    # 튜플은 고정된 개수의 요소를 가지는 자료구조입니다.
    # 패턴 매칭을 사용하면 튜플의 각 요소를 개별 변수에 바인딩할 수 있습니다.
    tuple_data = {:ok, 100}
    # 아래 패턴 매칭에서는 첫 번째 요소는 :ok, 두 번째 요소는 변수 result에 할당됩니다.
    {:ok, result} = tuple_data
    IO.puts("튜플 패턴 매칭 예제:")
    IO.puts("원본 튜플: #{inspect(tuple_data)}")
    IO.puts("추출된 값 (result): #{inspect(result)}")
    IO.puts("----------------------------------------------------")

    # -----------------------------------------------------------------
    # 2. 리스트 패턴 매칭 예제
    # -----------------------------------------------------------------
    # 리스트는 0개 이상의 요소를 포함하는 시퀀스 자료구조입니다.
    # 패턴 매칭을 통해 리스트의 첫 요소와 나머지 요소들을 분리할 수 있습니다.
    list_data = [10, 20, 30, 40, 50]
    # [head | tail] 구문은 리스트의 첫 요소를 head에, 나머지 요소들을 tail에 바인딩합니다.
    [head | tail] = list_data
    IO.puts("리스트 패턴 매칭 예제:")
    IO.puts("원본 리스트: #{inspect(list_data)}")
    IO.puts("Head (첫 번째 요소): #{inspect(head)}")
    IO.puts("Tail (나머지 요소들): #{inspect(tail)}")
    IO.puts("----------------------------------------------------")

    # -----------------------------------------------------------------
    # 3. 맵 패턴 매칭 예제
    # -----------------------------------------------------------------
    # 맵은 키-값 쌍으로 이루어진 자료구조이며, 패턴 매칭을 사용하여 특정 키의 값을 쉽게 추출할 수 있습니다.
    map_data = %{name: "Elixir", type: "Functional", version: "1.12"}
    # 패턴 매칭을 통해 :name과 :version 키에 해당하는 값을 각각 추출합니다.
    %{name: lang, version: ver} = map_data
    IO.puts("맵 패턴 매칭 예제:")
    IO.puts("원본 맵: #{inspect(map_data)}")
    IO.puts("추출된 name: #{inspect(lang)}")
    IO.puts("추출된 version: #{inspect(ver)}")
    IO.puts("----------------------------------------------------")

    # -----------------------------------------------------------------
    # 4. 가드(guard)를 사용한 패턴 매칭 예제
    # -----------------------------------------------------------------
    # 가드는 패턴 매칭에 추가적인 조건을 부여할 때 사용됩니다.
    # 아래 예제에서는 숫자가 짝수인지 여부를 판별하기 위해 가드를 사용합니다.
    number = 42
    result_guard =
      case number do
        n when rem(n, 2) == 0 ->
          "짝수입니다."
        _ ->
          "홀수입니다."
      end
    IO.puts("가드(guard)를 사용한 패턴 매칭 예제:")
    IO.puts("숫자 #{inspect(number)}는 #{result_guard}")
    IO.puts("----------------------------------------------------")

    # 최종 결과들을 하나의 맵으로 반환합니다.
    %{
      tuple_result: result,
      list_head: head,
      list_tail: tail,
      map_name: lang,
      map_version: ver,
      guard_result: result_guard
    }
  end
end

# 모듈 실행: 이 파일을 실행하면 콘솔에 각 패턴 매칭 예제 결과가 출력됩니다.
PatternMatchingExample.run()
