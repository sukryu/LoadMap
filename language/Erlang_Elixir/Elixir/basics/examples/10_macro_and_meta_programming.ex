defmodule MacroExample do
  @moduledoc """
  이 모듈은 Elixir의 매크로 및 메타 프로그래밍 기능을 상세하게 예시합니다.

  매크로는 컴파일 타임에 코드를 생성하는 강력한 도구로, 반복적인 패턴을 추상화하거나 DSL(도메인 특화 언어)를 작성할 때 유용하게 사용됩니다.

  이 예제에서는 간단한 디버깅 매크로 `debug/1`을 정의하여, 주어진 표현식을 평가한 후 그 결과를 로그로 출력하고 최종 결과를 반환하는 방법을 보여줍니다.

  주요 내용:
  1. **매크로 정의:**
     - `defmacro debug(expr)` 매크로를 정의하여, 인자로 전달된 표현식을 평가하고 그 결과를 출력합니다.
  2. **매크로 확장:**
     - `quote`와 `unquote`를 사용하여, 컴파일 타임에 코드를 생성하는 과정을 상세히 설명합니다.
  3. **매크로 활용 예제:**
     - 산술 연산, 리스트 컴프리헨션, 함수 호출 등 다양한 표현식에 대해 매크로를 적용하는 예제를 제공합니다.
  """

  @doc """
  `debug/1` 매크로는 주어진 표현식(`expr`)을 평가하고, 그 결과를 콘솔에 출력한 후 반환합니다.

  이 매크로의 동작 과정:

  1. `unquote(expr)`를 통해 전달된 표현식을 평가합니다.
  2. 평가된 결과를 변수 `value`에 바인딩합니다.
  3. `IO.puts/1`와 `inspect/1` 함수를 사용하여 결과를 로그로 출력합니다.
  4. 최종적으로 계산된 `value`를 반환합니다.

  ## 예제

      iex> MacroExample.debug(1 + 2 * 3)
      Debug - Expression result: 7
      7
  """
  defmacro debug(expr) do
    quote do
      # 전달된 표현식을 평가하고, 결과를 변수 value에 저장합니다.
      value = unquote(expr)
      # 평가된 결과를 디버깅 메시지로 출력합니다.
      IO.puts("Debug - Expression result: " <> inspect(value))
      # 최종적으로 평가된 결과를 반환합니다.
      value
    end
  end

  @doc """
  `run/0` 함수는 `debug/1` 매크로를 활용하여 다양한 표현식을 평가하고 그 결과를 출력하는 예제를 실행합니다.

  실행되는 예제 항목:

  1. **산술 연산:**
     - `1 + 2 * 3` 식을 평가하고, 그 결과를 로그로 출력합니다.

  2. **리스트 컴프리헨션:**
     - 1부터 5까지의 각 숫자의 제곱을 계산하는 리스트 컴프리헨션의 결과를 로그로 출력합니다.

  3. **함수 호출:**
     - `String.upcase/1` 함수를 사용하여 문자열을 대문자로 변환한 결과를 로그로 출력합니다.

  각 예제의 결과는 콘솔에 출력되고, 최종적으로 각 결과들을 포함하는 맵이 반환됩니다.
  """
  def run do
    IO.puts("=== Macro 및 메타 프로그래밍 예제 시작 ===")
    IO.puts("----------------------------------------------------")

    # -----------------------------------------------------------------
    # 1. 산술 연산 디버깅 예제
    # -----------------------------------------------------------------
    # debug 매크로를 사용하여 1 + 2 * 3 식의 결과를 계산하고 로그로 출력합니다.
    sum = debug(1 + 2 * 3)
    IO.puts("계산된 합: #{sum}")
    IO.puts("----------------------------------------------------")

    # -----------------------------------------------------------------
    # 2. 리스트 컴프리헨션 디버깅 예제
    # -----------------------------------------------------------------
    # for comprehension을 사용하여 1부터 5까지 각 숫자의 제곱을 계산하고, 결과를 출력합니다.
    squares = debug(for n <- 1..5, do: n * n)
    IO.puts("1부터 5까지의 제곱 결과: #{inspect(squares)}")
    IO.puts("----------------------------------------------------")

    # -----------------------------------------------------------------
    # 3. 함수 호출 디버깅 예제
    # -----------------------------------------------------------------
    # String.upcase/1 함수를 사용하여 문자열을 대문자로 변환하고, 그 결과를 로그로 출력합니다.
    message = debug(String.upcase("hello world"))
    IO.puts("대문자로 변환된 메시지: #{message}")
    IO.puts("----------------------------------------------------")

    IO.puts("=== Macro 및 메타 프로그래밍 예제 종료 ===")

    # 최종 결과들을 하나의 맵으로 반환합니다.
    %{
      sum: sum,
      squares: squares,
      message: message
    }
  end
end

# 모듈 실행: 이 파일을 실행하면 콘솔에 매크로 및 메타 프로그래밍 예제 결과가 출력됩니다.
MacroExample.run()
