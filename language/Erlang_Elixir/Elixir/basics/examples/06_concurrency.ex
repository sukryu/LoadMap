defmodule ConcurrencyExample do
  @moduledoc """
  이 모듈은 Elixir의 동시성 모델을 상세하게 예시하는 예제입니다.

  Elixir는 경량 프로세스와 메시지 전달을 통해 동시성을 손쉽게 구현할 수 있습니다.
  이 예제에서는 두 가지 주요 시나리오를 다룹니다:

  1. **간단한 에코 프로세스 예제:**
     - 하나의 프로세스를 생성하여, 메시지를 수신하면 그 메시지를 보낸 프로세스에 그대로 돌려보냅니다.

  2. **여러 프로세스를 통한 동시 작업 예제:**
     - 1부터 5까지 각 숫자의 제곱을 계산하는 작업을 병렬로 수행하는 프로세스들을 생성합니다.
     - 각 프로세스는 자신의 결과를 부모 프로세스에 전송하며, 부모는 모든 결과를 수신하여 출력합니다.

  이 모듈은 초보자부터 실무자까지 모두가 Elixir의 동시성 개념을 체험하고,
  프로세스 생성, 메시지 전송, 수신 등의 기본 동작을 이해하는 데 도움이 되도록 상세한 주석과 함께 작성되었습니다.
  """

  @doc """
  `run/0` 함수는 동시성 예제를 실행하여, 간단한 에코 프로세스와 여러 프로세스를 통한 동시 작업 결과를 콘솔에 출력합니다.

  단계별 설명:
  - **에코 프로세스 예제:**
    1. 에코 프로세스를 정의합니다. 이 프로세스는 메시지를 받으면, 해당 메시지를 보낸 프로세스로 돌려보냅니다.
    2. `spawn/1` 함수를 사용해 에코 프로세스를 생성합니다.
    3. 현재 프로세스의 PID를 사용하여 에코 프로세스에 메시지를 전송합니다.
    4. `receive` 구문을 통해 에코 프로세스로부터 응답 메시지를 대기 및 출력합니다.

  - **여러 프로세스를 이용한 동시 작업 예제:**
    1. 1부터 5까지의 숫자 각각에 대해, 숫자의 제곱을 계산하는 별도의 프로세스를 생성합니다.
    2. 각 프로세스는 계산 결과를 부모 프로세스에 메시지로 전송합니다.
    3. 부모 프로세스는 모든 결과를 `receive` 구문을 통해 수신하고, 최종 결과를 출력합니다.

  모든 결과는 콘솔에 출력되며, 최종적으로 수행된 결과들을 하나의 맵으로 반환합니다.
  """
  def run do
    IO.puts("=== Elixir 동시성 예제 시작 ===")
    IO.puts("----------------------------------------------------")

    # -----------------------------------------------------------------
    # 1. 간단한 에코 프로세스 예제
    # -----------------------------------------------------------------
    # 에코 프로세스는 메시지를 수신하면, 해당 메시지를 보낸 프로세스로 그대로 돌려보냅니다.
    echo = fn ->
      receive do
        {sender, message} ->
          # 수신된 메시지를 보낸 프로세스(sender)에게 다시 전송합니다.
          send(sender, {self(), message})
      end
    end

    # spawn/1 함수를 사용하여 에코 프로세스를 새 프로세스로 생성합니다.
    echo_pid = spawn(echo)
    IO.puts("에코 프로세스 생성됨. PID: #{inspect(echo_pid)}")

    # 현재 프로세스의 PID를 가져옵니다.
    current_pid = self()
    IO.puts("현재 프로세스 PID: #{inspect(current_pid)}")

    # 에코 프로세스에 메시지를 전송합니다.
    test_message = "안녕하세요, 동시성!"
    IO.puts("에코 프로세스에 메시지 전송: #{test_message}")
    send(echo_pid, {current_pid, test_message})

    # 메시지 수신: 에코 프로세스가 응답한 메시지를 2000ms 대기 후 받습니다.
    echo_response =
      receive do
        {from_pid, reply_message} ->
          "응답 수신됨. 보낸 PID: #{inspect(from_pid)}, 메시지: #{reply_message}"
      after
        2000 ->
          "응답 대기 시간 초과 (타임아웃)"
      end

    IO.puts(echo_response)
    IO.puts("----------------------------------------------------")

    # -----------------------------------------------------------------
    # 2. 여러 프로세스를 이용한 동시 작업 예제
    # -----------------------------------------------------------------
    # 이 예제에서는 1부터 5까지 각 숫자의 제곱을 계산하는 별도의 프로세스를 생성합니다.
    # 각 프로세스는 계산 결과를 부모 프로세스(current_pid)에게 전송합니다.
    process_pids =
      for n <- 1..5 do
        spawn(fn ->
          result = n * n
          IO.puts("프로세스 #{inspect(self())}: #{n}의 제곱은 #{result}")
          # 계산 결과를 부모 프로세스에 전송합니다.
          send(current_pid, {n, result})
        end)
      end

    # 부모 프로세스는 1부터 5까지 각 작업 프로세스로부터 결과를 수신합니다.
    parallel_results =
      for _ <- 1..5 do
        receive do
          {n, result} ->
            {n, result}
        after
          2000 ->
            {:error, "타임아웃"}
        end
      end

    IO.puts("여러 프로세스로부터 받은 결과:")
    IO.inspect(parallel_results)

    IO.puts("=== 동시성 예제 종료 ===")

    # 최종적으로 에코 프로세스 응답과 병렬 작업 결과를 포함한 결과 맵을 반환합니다.
    %{
      echo_response: echo_response,
      parallel_results: parallel_results
    }
  end
end

# 모듈 실행: 이 파일을 실행하면 콘솔에 동시성 예제 결과가 출력됩니다.
ConcurrencyExample.run()
