defmodule AsyncTaskExample do
  @moduledoc """
  이 모듈은 Elixir의 Task 모듈을 활용한 비동기 처리 예제를 상세하게 보여줍니다.

  주요 내용:
  1. **Task.async/1와 Task.await/2:**
     - 별도의 프로세스에서 비동기 작업을 실행하고, 그 결과를 기다리는 기본적인 사용법.

  2. **여러 태스크를 동시에 실행:**
     - for comprehension을 이용해 여러 작업을 동시에 실행하고, 각각의 결과를 수집하는 방법.

  3. **타임아웃 처리:**
     - Task.await/2에 타임아웃을 설정하여, 작업이 지연될 때 발생하는 타임아웃 상황을 처리하는 방법.

  각 예제는 자세한 주석과 함께 작성되어 있어, 초보자부터 실무자까지 비동기 작업 처리의 원리를 쉽게 이해할 수 있습니다.
  """

  @doc """
  `run/0` 함수는 비동기 태스크 예제를 실행하여,
  각각의 결과를 콘솔에 출력하고 최종 결과들을 하나의 맵으로 반환합니다.

  실행 예:
      iex> AsyncTaskExample.run()
      %{
        factorial_result: 120,
        squares_result: [1, 4, 9, 16, 25],
        timeout_result: "태스크 타임아웃 발생"
      }
  """
  def run do
    IO.puts("=== Async Task 예제 시작 ===")
    IO.puts("----------------------------------------------------")

    # -----------------------------------------------------------------
    # 1. 단일 비동기 태스크 예제: 팩토리얼 계산
    # -----------------------------------------------------------------
    # Task.async/1를 사용하여 별도의 프로세스에서 팩토리얼 계산 작업을 수행합니다.
    # Task.await/2를 사용하여 해당 작업이 완료될 때까지 기다리고, 결과를 반환받습니다.
    task1 = Task.async(fn -> factorial(5) end)
    result1 = Task.await(task1)
    IO.puts("비동기 태스크를 통해 계산한 5! 결과:")
    IO.inspect(result1)
    IO.puts("----------------------------------------------------")

    # -----------------------------------------------------------------
    # 2. 여러 비동기 태스크 예제: 각 숫자의 제곱 계산
    # -----------------------------------------------------------------
    # for comprehension을 사용하여 1부터 5까지의 각 숫자에 대해 별도의 태스크를 생성합니다.
    # 각 태스크는 자신의 계산 결과(제곱)를 부모 프로세스에 반환합니다.
    tasks = for n <- 1..5 do
      Task.async(fn -> n * n end)
    end
    # 생성된 모든 태스크에 대해 Task.await/1를 호출하여 결과를 수집합니다.
    results = Enum.map(tasks, &Task.await(&1))
    IO.puts("비동기 태스크를 통해 계산한 1부터 5까지의 제곱 결과:")
    IO.inspect(results)
    IO.puts("----------------------------------------------------")

    # -----------------------------------------------------------------
    # 3. 타임아웃 처리 예제
    # -----------------------------------------------------------------
    # 아래 예제에서는 작업이 지연되는 상황을 가정합니다.
    # 태스크는 1500ms 동안 대기한 후 응답하지만, Task.await/2의 타임아웃을 1000ms로 설정합니다.
    # 이로 인해 타임아웃이 발생하며, 이를 try/catch 구문을 통해 처리합니다.
    task3 = Task.async(fn ->
      :timer.sleep(1500)
      "늦은 응답"
    end)
    result3 =
      try do
        Task.await(task3, 1000)
      catch
        :exit, {:timeout, _} ->
          "태스크 타임아웃 발생"
      end
    IO.puts("타임아웃 처리 예제 결과:")
    IO.inspect(result3)
    IO.puts("----------------------------------------------------")

    IO.puts("=== Async Task 예제 종료 ===")

    # 최종 결과들을 하나의 맵으로 반환합니다.
    %{
      factorial_result: result1,
      squares_result: results,
      timeout_result: result3
    }
  end

  # -----------------------------------------------------------------
  # 재귀를 이용한 팩토리얼 계산 함수
  # -----------------------------------------------------------------
  defp factorial(0), do: 1
  defp factorial(n) when n > 0 do
    n * factorial(n - 1)
  end
end

# 모듈 실행: 이 파일을 실행하면 콘솔에 비동기 태스크 예제 결과가 출력됩니다.
AsyncTaskExample.run()
