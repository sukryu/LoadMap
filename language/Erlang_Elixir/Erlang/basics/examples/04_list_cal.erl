%%%-------------------------------------------------------------------
%%% @doc
%%% 이 모듈은 Erlang의 리스트 연산을 상세하게 예시하는 코드입니다.
%%%
%%% 본 예제에서는 다음 리스트 연산들을 다룹니다:
%%% 1. 리스트 생성 및 연결 (Concatenation)
%%%    - 두 개의 리스트를 생성하고, ++ 연산자를 사용하여 하나의 리스트로 연결하는 방법을 설명합니다.
%%%
%%% 2. 리스트 컴프리헨션 (List Comprehension)
%%%    - 조건에 따라 리스트의 요소를 선택하고, 변환하여 새로운 리스트를 생성하는 방법을 보여줍니다.
%%%
%%% 3. 리스트 접기 (Folding)
%%%    - lists:foldl/3 함수를 이용하여 리스트의 모든 요소를 누적 계산하여 하나의 결과값(예: 합계)을 도출하는 방법을 설명합니다.
%%%
%%% 4. 리스트 매핑 (Mapping)
%%%    - lists:map/2 함수를 사용하여 리스트의 각 요소에 동일한 함수를 적용, 변환된 결과 리스트를 생성하는 예제를 다룹니다.
%%%
%%% 5. 리스트 필터링 (Filtering)
%%%    - lists:filter/2 함수를 사용하여 리스트에서 조건에 맞는 요소들만 선택하는 방법을 예시합니다.
%%%
%%% 각 예제는 io:format/2 함수를 통해 결과를 출력하고,
%%% 최종적으로 모든 결과들을 하나의 튜플로 반환합니다.
%%%
%%% @author 
%%% @copyright 2025
%%%-------------------------------------------------------------------
-module(list_operations_examples).

%% 외부에서 호출할 수 있도록 리스트 연산 예제 함수를 export 합니다.
-export([list_operations_demo/0]).

%%%-------------------------------------------------------------------
%%% @doc
%%% list_operations_demo/0 함수는 여러 리스트 연산 기법들을 예시하며,
%%% 각 단계의 결과를 콘솔에 출력한 후, 그 결과들을 하나의 튜플로 반환합니다.
%%%
%%% @spec list_operations_demo() -> tuple()
%%%-------------------------------------------------------------------
list_operations_demo() ->
    %% ================================================================
    %% 1. 리스트 생성 및 연결 (Concatenation)
    %% ================================================================
    %% 설명:
    %% - List1과 List2라는 두 개의 리스트를 생성합니다.
    %% - ++ 연산자를 사용하여 두 리스트를 연결하면, 새로운 리스트가 생성됩니다.
    %%   예를 들어, [1,2,3] ++ [4,5,6]의 결과는 [1,2,3,4,5,6]입니다.
    List1 = [1, 2, 3],
    List2 = [4, 5, 6],
    ConcatenatedList = List1 ++ List2,
    
    %% ================================================================
    %% 2. 리스트 컴프리헨션 (List Comprehension)
    %% ================================================================
    %% 설명:
    %% - 리스트 컴프리헨션은 리스트의 각 요소를 순회하면서 조건에 맞는 요소만을
    %%   선택하거나, 변환하여 새로운 리스트를 생성할 때 사용됩니다.
    %% - 아래 예제에서는 ConcatenatedList의 요소 중 짝수만 선택하고, 해당 숫자를 제곱하여 새로운 리스트를 만듭니다.
    SquaredEvens = [X * X || X <- ConcatenatedList, X rem 2 =:= 0],
    
    %% ================================================================
    %% 3. 리스트 접기 (Folding)
    %% ================================================================
    %% 설명:
    %% - 리스트 접기는 리스트의 모든 요소를 누적하여 하나의 값을 도출할 때 사용됩니다.
    %% - 여기서는 lists:foldl/3 함수를 사용하여 ConcatenatedList의 모든 요소의 합을 계산합니다.
    %% - 초기 누적값은 0이며, 각 요소를 누적값에 더해 최종 합계를 구합니다.
    Sum = lists:foldl(fun(X, Acc) -> X + Acc end, 0, ConcatenatedList),
    
    %% ================================================================
    %% 4. 리스트 매핑 (Mapping)
    %% ================================================================
    %% 설명:
    %% - 리스트 매핑은 lists:map/2 함수를 사용하여 리스트의 각 요소에 대해 동일한 함수를 적용합니다.
    %% - 아래 예제에서는 List1의 각 요소를 2배로 만들어 새로운 리스트를 생성합니다.
    Doubled = lists:map(fun(X) -> X * 2 end, List1),
    
    %% ================================================================
    %% 5. 리스트 필터링 (Filtering)
    %% ================================================================
    %% 설명:
    %% - 리스트 필터링은 lists:filter/2 함수를 사용하여 리스트에서 특정 조건을 만족하는 요소만 선택합니다.
    %% - 여기서는 ConcatenatedList에서 값이 2보다 큰 요소들만을 선택하여 새로운 리스트를 만듭니다.
    Filtered = lists:filter(fun(X) -> X > 2 end, ConcatenatedList),
    
    %% ================================================================
    %% 결과 출력 (Printing the Results)
    %% ================================================================
    %% io:format/2 함수를 사용하여 각 단계의 결과를 콘솔에 출력합니다.
    io:format("~n--- Erlang 리스트 연산 예제 ---~n", []),
    io:format("1. List1: ~p~n", [List1]),
    io:format("2. List2: ~p~n", [List2]),
    io:format("3. Concatenated List (List1 ++ List2): ~p~n", [ConcatenatedList]),
    io:format("4. Squared Evens (짝수의 제곱): ~p~n", [SquaredEvens]),
    io:format("5. Sum of Concatenated List: ~p~n", [Sum]),
    io:format("6. Doubled List (각 요소 2배): ~p~n", [Doubled]),
    io:format("7. Filtered List (요소가 2보다 큰 값): ~p~n", [Filtered]),
    
    %% 최종 결과들을 하나의 튜플로 반환합니다.
    {list_operations_demo, List1, List2, ConcatenatedList, SquaredEvens, Sum, Doubled, Filtered}.
