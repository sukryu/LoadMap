%%%-------------------------------------------------------------------
%%% @doc
%%% 이 모듈은 Erlang의 제어 구조(if, case, receive)를 상세하게 예시하는 코드입니다.
%%%
%%% 본 예제에서는 다음 제어 구조를 다룹니다:
%%% 1. if 문: 가드(guard)를 사용하여 조건을 평가하고, 첫 번째 참인 절의 결과를 반환하는 방식.
%%% 2. case 문: 주어진 값에 대해 패턴 매칭과 가드를 활용하여 여러 경우 중 하나를 선택하는 방식.
%%% 3. receive 문: 프로세스 간 비동기 메시지 전달을 통해 메시지를 수신하는 방식.
%%%
%%% 각 예제는 io:format/2를 이용해 결과를 콘솔에 출력하며,
%%% 최종적으로 모든 예제 결과들을 하나의 튜플로 반환합니다.
%%%
%%%-------------------------------------------------------------------
-module(control_structures_examples).

%% 외부에서 호출할 수 있도록 제어 구조 예제 함수를 export 합니다.
-export([control_structures_demo/0]).

%%%-------------------------------------------------------------------
%%% @doc
%%% control_structures_demo/0 함수는 if, case, receive 구문을 포함한
%%% 다양한 제어 구조 예제를 실행하고, 그 결과를 출력한 후,
%%% 결과들을 하나의 튜플로 반환합니다.
%%%
%%% @spec control_structures_demo() -> tuple()
%%%-------------------------------------------------------------------
control_structures_demo() ->
    %% ================================================================
    %% 1. if 문 예제
    %% ================================================================
    %% 설명:
    %% - if 문은 여러 조건(가드)을 평가하여, 첫 번째로 참인 절의 결과를 반환합니다.
    %% - if 문은 직접적인 패턴 매칭은 지원하지 않고, 반드시 가드 표현식을 사용해야 합니다.
    %% - 아래 예제에서는 1+1이 2와 동일한지 검사하여, 참이면 "수학은 여전히 작동합니다"를 반환합니다.
    IfResult = if
        1 + 1 =:= 2 ->
            "수학은 여전히 작동합니다";  %% 첫 번째 가드가 참이면 이 절이 실행됨.
        true ->
            "이 조건은 실행되지 않습니다"  %% 기본 절 (else 역할)
    end,
    
    %% ================================================================
    %% 2. case 문 예제
    %% ================================================================
    %% 설명:
    %% - case 문은 주어진 값을 패턴 매칭하여, 해당하는 절의 코드를 실행합니다.
    %% - 가드(guard)를 함께 사용하여 세밀한 조건 분기를 할 수 있습니다.
    %% - 아래 예제에서는 변수 Number에 담긴 숫자 값을 기준으로 음수, 10 미만의 양수, 또는 10 이상의 양수로 분기합니다.
    Number = 15,
    CaseResult = case Number of
        %% N이 음수이면 negative를 반환합니다.
        N when N < 0 ->
            negative;
        %% N이 양수이면서 10보다 작으면 small_positive를 반환합니다.
        N when N > 0, N < 10 ->
            small_positive;
        %% N이 10 이상이면 large_positive를 반환합니다.
        N when N >= 10 ->
            large_positive
    end,
    
    %% ================================================================
    %% 3. receive 문 예제 (메시지 수신)
    %% ================================================================
    %% 설명:
    %% - receive 문은 현재 프로세스의 메시지 큐에서 특정 패턴에 맞는 메시지를 기다립니다.
    %% - 메시지가 도착하면 해당 패턴에 매칭된 절의 코드를 실행하고, 메시지를 처리합니다.
    %% - timeout 옵션을 통해 지정된 시간 내에 메시지가 없을 경우 다른 처리를 할 수 있습니다.
    %% - 아래 예제에서는 spawn/1을 사용하여 에코 서버 프로세스를 생성한 후,
    %%   해당 프로세스로 메시지를 전송하고, 응답을 기다립니다.
    
    %% 에코 서버 프로세스를 생성하여 echo_server/0 함수를 실행합니다.
    EchoServerPid = spawn(fun echo_server/0),
    
    %% 현재 프로세스의 PID(self())와 "Erlang 메시지 테스트" 문자열을 포함한 메시지를 에코 서버로 전송합니다.
    EchoServerPid ! {self(), "Erlang 메시지 테스트"},
    
    %% 현재 프로세스는 receive 문을 통해 에코 서버로부터의 응답 메시지를 기다립니다.
    %% 2000 밀리초(2초) 내에 응답이 없으면 timeout을 반환합니다.
    ReceiveResult = receive
        {From, Reply} ->
            %% From: 메시지를 보낸 프로세스의 PID, Reply: 에코 서버가 응답한 메시지.
            {From, Reply}
    after 2000 ->
        timeout
    end,
    
    %% ================================================================
    %% 결과 출력 (Printing the Results)
    %% ================================================================
    %% io:format/2 함수를 이용하여 각 제어 구조 예제의 결과를 콘솔에 출력합니다.
    io:format("~n--- Erlang 제어 구조 예제 ---~n", []),
    io:format("1. if 문 결과: ~s~n", [IfResult]),
    io:format("2. case 문 결과: ~p~n", [CaseResult]),
    io:format("3. receive 문 결과: ~p~n", [ReceiveResult]),
    
    %% 최종적으로 모든 예제 결과들을 하나의 튜플로 반환합니다.
    {control_structures_demo, IfResult, CaseResult, ReceiveResult}.

%%%-------------------------------------------------------------------
%%% @private
%%% @doc
%%% echo_server/0 함수는 간단한 에코 서버 역할을 수행합니다.
%%%
%%% - receive 문을 사용하여 {From, Message} 형태의 메시지를 기다립니다.
%%% - 메시지를 수신하면, "받은 메시지: " 문자열을 접두어로 붙여 응답을 보내고,
%%%   다시 자기 자신을 호출하여 무한 루프로 동작합니다.
%%% - 만약 stop 메시지를 수신하면 프로세스가 종료됩니다.
%%%-------------------------------------------------------------------
echo_server() ->
    receive
        {From, Message} ->
            %% 수신된 메시지에 대해 응답 문자열을 생성합니다.
            Response = "받은 메시지: " ++ Message,
            %% 보낸 프로세스(From)에게 응답 메시지를 전송합니다.
            From ! {self(), Response},
            %% 에코 서버는 계속해서 메시지를 처리하기 위해 재귀 호출을 합니다.
            echo_server();
        %% stop 메시지를 받으면 에코 서버를 종료합니다.
        stop ->
            ok
    end.
