%%%-------------------------------------------------------------------
%%% @doc
%%% 이 모듈은 Erlang의 프로세스 생성과 메시지 전달 예제를 상세하게 설명합니다.
%%%
%%% 본 예제에서는 다음을 다룹니다:
%%% 1. 프로세스 생성 (spawn/1 사용)
%%%    - 새로운 프로세스를 생성하고, 에코 서버 역할을 수행하는 함수를 실행합니다.
%%%
%%% 2. 메시지 전달 및 수신
%%%    - 생성된 에코 서버 프로세스에 메시지를 전송하고, receive 구문을 사용하여
%%%      에코 서버로부터 응답 메시지를 받는 과정을 상세하게 보여줍니다.
%%%
%%% 3. 에코 서버 루프 (재귀 호출)
%%%    - 에코 서버가 무한 루프를 통해 지속적으로 메시지를 처리하는 방식을 설명합니다.
%%%
%%% 각 단계마다 io:format/2 함수를 사용해 결과를 콘솔에 출력하며,
%%% 최종적으로 모든 예제 결과를 하나의 튜플로 반환합니다.
%%%
%%%-------------------------------------------------------------------
-module(process_examples_examples).

%% 외부에서 호출할 수 있도록 프로세스 예제 함수를 export 합니다.
-export([process_examples_demo/0]).

%%%-------------------------------------------------------------------
%%% @doc
%%% process_examples_demo/0 함수는 다음 작업을 수행합니다:
%%% 1. spawn/1 함수를 사용해 에코 서버 프로세스를 생성합니다.
%%% 2. 생성된 프로세스에 {Sender, Message} 형태의 메시지를 전송합니다.
%%% 3. receive 구문을 통해 에코 서버로부터 메시지를 수신하고, 그 결과를 출력합니다.
%%%
%%% 최종 결과로 에코 서버의 PID, 보낸 메시지, 받은 응답 메시지를 포함한 튜플을 반환합니다.
%%%-------------------------------------------------------------------
process_examples_demo() ->
    %% ================================================================
    %% 1. 에코 서버 프로세스 생성
    %% ================================================================
    %% 설명:
    %% - spawn/1 함수를 사용하여 새로운 프로세스를 생성합니다.
    %% - 생성된 프로세스는 echo_loop/0 함수를 실행하게 되며,
    %%   echo_loop/0는 무한 루프로 메시지를 수신하고 응답을 보내는 역할을 합니다.
    EchoPid = spawn(fun echo_loop/0),
    
    %% ================================================================
    %% 2. 메시지 전달 (send 연산)
    %% ================================================================
    %% 설명:
    %% - 현재 프로세스의 PID는 self() 함수를 통해 얻을 수 있습니다.
    %% - 보낼 메시지는 {Sender, Message} 형태로 구성되며,
    %%   여기서는 자신의 PID와 "안녕하세요, 에코 서버!" 문자열을 포함합니다.
    SelfPid = self(),
    MessageToSend = "안녕하세요, 에코 서버!",
    EchoPid ! {SelfPid, MessageToSend},
    
    %% ================================================================
    %% 3. 메시지 수신 (receive 구문)
    %% ================================================================
    %% 설명:
    %% - receive 구문을 사용하여 에코 서버 프로세스로부터의 응답 메시지를 대기합니다.
    %% - 응답 메시지는 {FromPid, ReplyMessage} 형태로 수신됩니다.
    %% - 2000 밀리초(2초) 이내에 메시지가 도착하지 않으면 timeout을 반환합니다.
    Response = receive
        {FromPid, ReplyMessage} ->
            {FromPid, ReplyMessage}
    after 2000 ->
        timeout
    end,
    
    %% ================================================================
    %% 결과 출력 (Printing the Results)
    %% ================================================================
    %% io:format/2 함수를 사용해 에코 서버와의 메시지 전달 결과를 콘솔에 출력합니다.
    io:format("~n--- Erlang 프로세스 예제 ---~n", []),
    io:format("에코 서버 PID: ~p~n", [EchoPid]),
    io:format("보낸 메시지: ~s~n", [MessageToSend]),
    io:format("수신된 응답: ~p~n", [Response]),
    
    %% 최종 결과들을 하나의 튜플로 반환합니다.
    {process_examples_demo, EchoPid, MessageToSend, Response}.

%%%-------------------------------------------------------------------
%%% @private
%%% @doc
%%% echo_loop/0 함수는 간단한 에코 서버의 역할을 수행합니다.
%%%
%%% 설명:
%%% - receive 구문을 통해 {From, Message} 형태의 메시지를 무한히 대기합니다.
%%% - 메시지가 도착하면, 받은 메시지를 보낸 프로세스에게 그대로 돌려보냅니다.
%%% - 메시지 처리 후, 재귀 호출을 통해 계속해서 메시지를 처리합니다.
%%% - 만약 stop 메시지를 수신하면, 루프를 종료하고 프로세스를 종료합니다.
%%%-------------------------------------------------------------------
echo_loop() ->
    receive
        {From, Message} ->
            %% 수신된 메시지를 그대로 돌려보냅니다.
            %% 응답 메시지 형식: {자신의 PID, 원래 메시지}
            From ! {self(), Message},
            %% 에코 서버는 계속 동작하기 위해 재귀 호출합니다.
            echo_loop();
        %% stop 메시지가 수신되면, 프로세스를 종료합니다.
        stop ->
            ok
    end.
