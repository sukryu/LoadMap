apiVersion: v1
kind: Service
metadata:
  name: go-api-service # 서비스 이름
  namespace: backend   # 배포와 동일한 네임스페이스
  labels:
    app: go-api        # 애플리케이션 식별 레이블
    tier: backend      # 시스템 내 계층 레이블
  annotations:
    # 클라우드 제공자별 로드 밸런서 구성을 위한 어노테이션
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"                     # AWS의 경우 Network Load Balancer 사용
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"                # 내부 로드 밸런서로 설정 (VPC 내부에서만 접근 가능)
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"        # 백엔드 프로토콜 지정
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:region:account:certificate/cert-id" # TLS 인증서 ARN (HTTPS 사용 시)
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"              # SSL이 적용될 포트
    
    # Prometheus 모니터링 설정
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    
    # 기타 메타데이터
    description: "Go API 서비스 - 백엔드 API 엔드포인트 제공"
spec:
  # 서비스 유형: 
  # - ClusterIP: 클러스터 내부에서만 접근 가능 (기본값)
  # - NodePort: 각 노드의 IP와 정적 포트로 서비스 노출
  # - LoadBalancer: 클라우드 제공자의 로드 밸런서를 생성하여 서비스 노출
  # - ExternalName: CNAME 레코드를 통한 외부 서비스 매핑
  type: LoadBalancer
  
  # 외부로 노출할 포트와 서비스가 트래픽을 전달할 타겟 포트 정의
  ports:
    - name: http
      port: 80              # 서비스 IP에서 수신할 포트
      targetPort: 8080      # 트래픽을 전달할 컨테이너 포트
      protocol: TCP
    - name: https
      port: 443             # HTTPS 트래픽을 위한 포트
      targetPort: 8080      # 내부적으로는 HTTP 포트로 전달 (SSL 종료는 로드 밸런서에서 처리)
      protocol: TCP
  
  # 세션 어피니티 설정: 동일 클라이언트의 요청을 가능한 한 동일한 포드로 라우팅
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800  # 세션 어피니티 유지 시간 (3시간)
  
  # 셀렉터: 트래픽을 라우팅할 포드를 선택하는 레이블
  # deployment.yaml의 포드 템플릿 레이블과 일치해야 함
  selector:
    app: go-api
    tier: backend
  
  # 외부 트래픽 정책:
  # - Cluster: 모든 노드로 트래픽 전달 가능 (기본값)
  # - Local: 포드가 실행 중인 노드로만 트래픽 전달 (성능 최적화, 클라이언트 IP 보존)
  externalTrafficPolicy: Local
  
  # 클러스터 내부 트래픽 정책:
  # - Cluster: 모든 엔드포인트에 트래픽 분산 (기본값)
  # - Local: 로컬 엔드포인트로만 트래픽 전달
  internalTrafficPolicy: Cluster
  
  # 로드 밸런서 IP 할당 방식:
  # IPv4, IPv6, 또는 둘 다 지원할지 지정
  ipFamilyPolicy: SingleStack
  ipFamilies:
    - IPv4
  
  # 로드 밸런서 상태 확인 설정
  # 클라우드 제공자 종속적 기능으로 어노테이션을 통해 구성하는 경우가 많음
  # 아래는 GCP 예시
  # healthCheckNodePort: 32000